<?php

namespace app\api\controller;

use app\common\model\Litestoreorderrefund;
use app\common\controller\Api;
use app\common\model\Groupbuygoods;
use app\common\model\Joingroupbuy;
use app\common\model\Litestoregoods;
use app\common\model\Litestoregoodsspec;
use app\common\model\User;
use app\admin\model\Litestorefreight;
use app\common\model\Litestoreorder;
use app\common\model\Litestoreordergoods;
use think\Db;
use fast\Random;
use Think\Model\RelationModel;

class Test extends Api
{

    protected $noNeedLogin = ['*'];
    protected $noNeedRight = ['*'];
    /**
     * @var string
     */
    protected $name;


    public function ssss()
    {
        $str = 'iz7smrb4a3gDj90gIsqIYRNN/Knh2eLuN+x5n2e/sRroksos8rkzh2n6mMxzZwMaCxlBURAPDNc9HIOP56jwN/q0u/e7bGDgmByg1uY3DNyay2gm3PvST2Eha+VAy+JijGaxX5QGDxuPawox1F/wifbn0JW7Vd8NFx/g4LEey7QkMHDQP4sVbiCvH6OIUjfH2G5AvGSOqynlw3W6Yf3A5B9CMOfMFa7JhPtzVrGNl55NJcygXsaRWcQ2NTjdMcdQZboNXq7Fxp2k7+c5wMdHPifS4lnvYzcD58qfKuu+PucjsRSBnqwU5EsknmnDQlfMvYrmvS77SD1+M5DSErL+TPAUNxaMzb22UIptKY7tw+k7FmFrf/2ftZJg+3Q36CCdkBBVXMwVpYFV/TqEGN2mVCH6JC32XZT0wsG/FNQIHraa40MEtsvxJUfoeMk8qarWFi97w6YBhYjacZdSQHMIqj37MclEVpB52b0zxjgvOYI=';
        $data = openssl_decrypt(base64_decode($str), 'AES-128-CBC', base64_decode('Sk3slrVvprx9LfYgqOm1Tw=='), 1, base64_decode('SZjjzEaP6u5Z9RD/n9xwQQ=='));
        dump(json_decode($data, true));
    }

    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->order = new  Litestoreorder();
        $this->order_goods = new Litestoreordergoods();
        $this->item_spec = new Litestoregoodsspec();
        $this->groupbuy_goods_model = new Groupbuygoods();
        $this->join_groupbuy_model = new Joingroupbuy();
        $this->user = new User();
        $this->item = model('Litestoregoods');
        $this->shoping_cart = model('Shopingcart');
        $this->order = model('Litestoreorder');
        $this->order_goods = model('Litestoreordergoods');

        $this->item_spec = model('Litestoregoodsspec');
        $this->order_config_model = model('Orderconfig');
        $this->order_refund = model('Litestoreorderrefund');
        $this->user = model('User');
        $this->groupbuy_goods_model = model('Groupbuygoods');
        $this->user_agent_apply = model('UserAgentApply');
        $this->coupon = model('common/Litestorecoupon');

        $this->couponData = model('common/Litestorecoupondata');
    }

    public function getGoodsPrice(Litestoregoods $goods)
    {
        $uid = 188;
        $user_info = User::get($uid);

    }

    public function test()
    {
//        $controller = controller('Order');
        $getFreight = $this->getFreight(50.00, 1);
        dump($getFreight);
        die;
    }

    /**
     * 获取运费
     * @param $totalprice 订单金额
     * @param $total_num 订单数量
     *
     * */
    public function getFreight($totalprice, $total_num)
    {
        $model = new Litestorefreight();
//        dump(config('site.freight'));
        $freight = $model->detail(config('site.freight'));
        dump($freight->name);
        die;
        if (!$freight)
            return 0;
        $data = $freight['rule'][0];

        switch ($freight['method']) {
            case 10: //件数
                if ($total_num <= $data['first']) {
                    $freight = $data['first_fee'];
                } else {
                    $total_num--;
                    $freight = $data['first_fee'] + intval($total_num / $data['additional']) * $data['additional_fee'];
                }
                break;
            case 20://重量

                break;
            case 30://金额

                dump($totalprice);
                dump($data['first']);
                dump($data['first_fee']);
                dump($total_num);
                dump($data['additional']);
                dump($data['additional_fee']);
                if ($totalprice <= $data['first']) {
                    $freight = $data['first_fee'];
                } else {
                    $freight = intval($total_num / $data['additional']) * $data['additional_fee'];
                }
                dump($freight);
                die;
                break;
        }
        return number_format($freight, 2);
    }

    public function signRule()
    {
        $config = new \app\common\model\Config;
        $rule = $config->getConfigData(['name' => 'sign_rule']);
        dump($rule);
        die;
    }

    public function cate()
    {
        $orderGoods = model('common/Litestoreordergoods');
        $field = 'goods_id,goods_spec_id,total_num';
        $goodsList = $orderGoods->where('order_id=' . 236)->field($field)
            ->with(['goods' => function ($query) {
                $query->withField('goods_id,spec_type,sales_actual,stock_num,goods_status');
            }])->select();

        dump($goodsList);
        die;
    }

    public function testUserSave(User $user)
    {
        $user = $user->get('197');
//        $user->group_id = 0;
        $user->save();

    }

    public function groupAfterPay(Litestoreorder $order, Litestoreordergoods $orderGoods)
    {
        $orderNo = $this->request->request();
        $orderNo = 'Y20022845172847';
        $order = $order::getByOrderNo($orderNo);
        $goods_field = 'total_num , goods_spec_id ,goods_id,images,activity_type,activity_id';
        $orderGoodsList = $orderGoods->select_data(['order_id' => 343], $goods_field);

        $update = self::group_buy_goods_order($order->id, $order->activity_id, $order->total_num, false);
        dump($update);
        die;
    }


    /**
     * 团购订单系列操作  支付回调  退款  按时未完成退款
     * @param $order_id  订单id
     * @param $activity_id  活动id
     * @param $goods_number 数量
     * @param $state true 退款  false 生成订单
     *
     */
    public function group_buy_goods_order($order_id, $activity_id, $goods_number, $state)
    {
        //查询参与团购信息
        $join_groupbuy_info = $this->join_groupbuy_model->find_data(['order_id' => $order_id], 'pid,group_num,join_num ,type ,status');

        if (!$join_groupbuy_info)
            return false;

        $join_groupbuy_save['join_num'] = $join_groupbuy_info['status'] == 2 ?
            $this->join_groupbuy_model->where(['pid' => $join_groupbuy_info['pid']])->value('join_num') + 1 :
            $join_groupbuy_info['join_num']; //获取参与人数

        //修改支付状态
        $join_groupbuy_save['type'] = 1; //进行中
        if ($join_groupbuy_save['join_num'] == $join_groupbuy_info['group_num'])//团购完成
            $join_groupbuy_save['type'] = 2; //已完成 //修改支付状态

        if ($join_groupbuy_save['type'] == 2 || $join_groupbuy_info['status'] == 2)
            $where = ['pid' => $join_groupbuy_info['pid'], 'type' => ['IN', '1,2']];

        $join_groupbuy_save['type'] = $state ? 3 : $join_groupbuy_save['type'];
        switch ($join_groupbuy_save['type']) {

            case 1: //拼团中
                if ($join_groupbuy_info['status'] == 2) {//参与拼团 修改整体拼团数量
                    $save['join_num'] = $join_groupbuy_save['join_num'];
                    $this->join_groupbuy_model->update_data($where, $save);
                    unset($where);
                }
                $where['order_id'] = $order_id;
                break;
            case 2://订单已完成 修改整个拼团状态

                $this->join_groupbuy_model->update_data(['order_id' => $order_id], ['type' => 2]);
                $order_ids = $this->join_groupbuy_model->where($where)->column('order_id');
                $this->order->update_data(['id' => ['IN', $order_ids]], ['order_status' => 20]);

                $save['join_num'] = $join_groupbuy_save['join_num'];
                break;
            case 3:
                $where['order_id'] = $order_id;
                break;
        }

        $save['type'] = $join_groupbuy_save['type'];
        $update_join_groupbuy = $this->join_groupbuy_model->update_data($where, $save);//修改参团数据
        $update_group_buy_goods = $this->groupbuy_goods_model->updateSpec($activity_id, $goods_number, $state ? 2 : 1, $join_groupbuy_save['type']); //修改销量和库存
//        dump($update_join_groupbuy);dump($update_group_buy_goods);dump($join_groupbuy_save['type']);
        return $update_join_groupbuy && $update_group_buy_goods ? $join_groupbuy_save['type'] : false;
    }

    public function ad_list()
    {
        //获取首页广告 分类图片信息
        $ad_list = model('Cmsblock')->select_data(['cate_id' => 19, 'status' => 'normal'], 'id,name,image,cate_id,url,jump_status');
        foreach ($ad_list as $k => $v) {
            if ($v['jump_status'] == 8) {
                $ad_list[$k]['url'] = '';
            } else {
//                $activity_ids = explode(',', $v['url']);
                $result = model('Cmsblock')->checkAdListJump($v['url'], $v['jump_status']);
                $ad_list[$k]['activity_id'] = $result['activity_id'];
                $ad_list[$k]['goods_id'] = $result['goods_id'];
            }
        }
        dump($ad_list->toArray());
        die;
        die;

    }


    /**
     * 退款
     * @throws \think\exception\DbException
     */
    public function pintuanRefund()
    {
        $this->order_refund = new Litestoreorderrefund();
        $order = new Litestoreorder();
        $orderGoods = new Litestoreordergoods();
        $orderIds = model('Litestoreorder')->where('order_status', '>', 0)->limit('3')->column('id');
        $pay = controller('pay');
        foreach ($orderIds as $orderId) {
            $orderInfo = $order->get($orderId);
            $order_goods_id = $orderGoods->where("order_id=$orderId")->value('id');
            $addRefund = array(
                'order_goods_id' => $order_goods_id,
                'order_no' => $orderInfo->order_no,
                'money' => $orderInfo->pay_price,
                'remark' => '团购时间已过，自动退款',
                'coupon_id' => $orderInfo->coupon_id,
                'refund_no' => order_sn(7),
            );

            $this->order_refund->data($addRefund, true)->isUpdate(false)->save();
            $refund_id = $this->order_refund->getLastInsID();
            $refundInfo = Litestoreorderrefund::get($refund_id);
            $orderInfo = Litestoreorder::get($orderId);
            $pay->refund($refundInfo, $orderInfo);
        }
    }

    public function order()
    {
        $this->block = model('Cmsblock');
        $uid = $this->auth->id;
//        dump($uid);
//        //获取我的订单模块
//        $order_module = $this->block->select_data(['cate_id' => 27, 'status' => 'normal'], 'id,name,image');
//        $list = model('Litestoreorder')->where(['is_status' => 1, 'is_del' => 0,'user_id' => $uid,'order_type' => 10])->field('id')->select();
//
//        if ($order_module) {
//            foreach ($order_module as $k => $v) {
//                $where = [
//                    'is_del' => 0,
//                    'user_id' => $this->auth->id,
//                    'order_type' => 10,
//                    'type' => 0,
//                ];
//                switch ($v['id']) {
//                    case 61:
//                        $where['is_status'] = 1;
//                        $order_count = model('Litestoreorder')->where($where)->count();
//                        break;
//                    case 62:
//                        $where['is_status'] = 2;
//                        $order_count = model('Litestoreorder')->where($where)->count();
//                        break;
//                    case 104:
//                        $where['refund_status'] = ['neq' ,'40'];
//                        $order_count = model('Litestoreorder')->where($where)->count();
//                        break;
//                    default:
//                        $order_count = '';
//                        break;
//                }
//                $order_module[$k]['image'] = config('item_url') . $v['image'];
//                $order_module[$k]['badge'] = empty($order_count) ? '0' : $order_count;
//            }
//        }
        $block_where = ['cate_id' => 29, 'status' => 'normal', 'is_show' => 0];
        $functional_class = $this->block->select_data($block_where, 'id,name,image');
//        $service_module = $this->block->set_url_img($functional_class);
        $where = [
            'is_del' => 0,
            'user_id' => $this->auth->id,
            'order_type' => 10,
            'type' => 0,
        ];
        if ($functional_class) {
            foreach ($functional_class as $module) {
                switch ($module['id']) {
                    case 71://套餐订单
                        $where['type'] = ['neq', 0];
                        $order_count = model('Litestoreorder')->where($where)->count();
                        break;
                    default:
                        $order_count = '';
                        break;
                }
                $module['badge'] = empty($order_count) ? '0' : $order_count;
            }
        }
        dump($functional_class->toArray());
        die;
    }

    public function checkIsSet()
    {
        $param = $this->request->request();
    }

    public function callBack()
    {
        $user = User::get(function ($query) {
            $query->where('id', '197');
        });
        $username = User::where('vip_type', '>', 0)->column('id,username');
        $user = User::getById('281');
        dump($user);
        die;
    }

    public function testGoods()
    {
        $goodsId = $this->request->request('goods_id');
        $buyList = !$this->buyGoods($goodsId) ? [] : $this->buyGoods($goodsId);
        dump($buyList);
        die;
    }


    public function buyGoods($goods_id)
    {
        $order = new Litestoreorder();
        $order_info = $order->where(['pay_status' => 20, 'is_del' => 0])->field('id,user_id')
            ->with(['orderGoods' => function ($query) use ($goods_id) {
                $query->where(['goods_id' => $goods_id])->withField('goods_id');
            }, 'userAddress' => function ($query) {
                $query->withField('user_id,name,province,city,region');
            }, 'user' => function ($query) {
                $query->withField('avatar,id');
            }])->orderRaw('rand()')->limit(10)->select();

//        $orderGoods = new Litestoreordergoods();
//        $orderGoodsInfo = $orderGoods->where()

//        dump($order_info->toArray());die;
        $buyList = [];
//        $order_info = $order_info->limit('20');
        foreach ($order_info as $item) {
            if (!empty($item['order_goods']->toArray())) {
                $details = $item['userAddress']['province'] . $item['userAddress']['city'] . $item['userAddress']['region'];
                $name = $item['userAddress']['name'];
                $name = substr($name, 0, -6);
                $res['note'] = $details . $name . '**';
                $res['avatar'] = $item['user']['avatar'];
                $buyList[] = $res;
            }
        }
        $this->success('success', ['list' => $buyList]);
//        return $buyList;

    }

    public function agentUserId()
    {
        $userRebate = model('UserRebate');
        $rebateList = $userRebate->select_data('', 'uid,first_id');
        foreach ($rebateList as $item) {
            $user = User::get($item['uid']);
            if (!empty($user)) {
                $user->pid = $item['first_id'];
                $user->save();
            }
//            $user->save();
//            dump($user->pid);
        }
        die;
    }

    public function agentCount()
    {
        $userRebate = model('UserRebate');
        $where['distributor_id'] = ['neq', 0];
        $where['distributor'] = ['in', '1,2'];
    }

    public function caseTest()
    {
        $i = 1;
        switch (true) {
            case $i < 0:
                echo 222;
                break;
            case $i > 0:
                echo 111;
                break;
            case $i = 0:
                echo 333;
                break;
        }

    }

    public function getType()
    {
        $id = 1;
        $this->testGetType($id);
    }

    /**
     * 自动收货与评价
     * 走确认收货和发表评价接口
     *
     */
    public function automatic_re_and_eva()
    {

        $end_time = time() - config('site.automatic_re_and_eva') * 86400;

        $where = [
            'freight_status' => '20',
            'order_status' => '30',
            'freight_time' => ['lt', $end_time]
        ];
        $orderList = $this->order->select_all($where, 'id,user_id');
        foreach ($orderList as $order) {
            $this->confirm_receipt($order['id'], 1);
            $this->addevaluate($order['id'], $order['user_id'], 1);
        }
        echo '成功';
        die;
    }

    public function confirm_receipt($order_id = '', $status)
    {
        $params = $this->request->request();
        !$status && !$params['order_id'] && $this->error('order_id不存在');
        $uid = $this->auth->id;

        if ($status != 1) {
            $where['user_id'] = $uid;
            $where['id'] = $params['order_id'];
        } else {
            $where['id'] = $order_id;
        }
        dump($where);
        die;
        //获取待收货订单信息
        $order_info = $this->order->find_data(['id' => $params['order_id']], '*');
        $order_info['order_status'] != '30' && $this->error('订单状态错误');
//        $addDistribution = $this->addDistributionOrder($order_info, $uid, $params['order_id']);
        $addDistribution = 1;
        $order_info->type == 0 && Pay::commission($order_info);
        if ($this->order->receipt($where) && $addDistribution) {
            $this->success('操作成功');
        } else {
            $this->error('操作失败');
        }
    }

    /*
 * 发表评价
 * @param uid 用户id
 * @param goods_id 商品id
 * @param order_id 订单id
 * @param image 评论图片
 * @param star_num 评论星数
 * @param content 评论内容
 *
 */
    public function addevaluate($orderId = '', $user_id = '', $status)
    {
        $params = $this->request->except('token');
        $uid = !$status ? $this->auth->id : $user_id;
        $order_id = !$status ? $params['order_id'] : $orderId;

        //获取用户信息
        $user_info = $this->user->getUserInfo(['id' => $uid], 'id,username user_name');
        $user_info['avatar'] = $this->user->getAvatar($uid);
        //获取商品信息
        $goods_info = $this->order_goods->select_data(['order_id' => $order_id], 'goods_id,goods_name,images,key_name goods_sku');

        Db::startTrans();
        if ($goods_info) {
            foreach ($goods_info as $k => $v) {
                $data = [
                    'images' => empty($params['image']) ? '' : $params['image'],
                    'goods_image' => $v['image'],
                    'user_head' => $user_info['avatar'],
                    'add_time' => time(),
                    'uid' => $uid,
                ];
                $add_r = array_merge($params, $user_info->toArray(), $v->toArray(), $data);
                if ($add_r) {
                    unset($add_r['image']);
                    unset($add_r['url']);
                    unset($add_r['avatar']);
                    unset($add_r['username']);
                    unset($add_r['id']);
                    $add = $this->comment->allowField(true)->save($add_r);
                }
            }
        }
        $save = ['order_status' => 50];
        $this->order->update_data(['id' => $params['order_id']], $save);
        if ($add) {
            Db::commit();
            $this->success('发表成功');
        } else {
            Db::rollback();
            $this->error('发表失败');
        }

    }

    public function count()
    {
        $userId = 208;
        $this->user = model('User');
        $member_list = $this->user->select_data(['pid' => $userId, 'vip_type' => ['GT', 0]], 'id,avatar,username,mobile');
        $member_list = $this->user->set_img_url($member_list);
        dump(count($member_list));
        die;
    }

    public function comment()
    {
        $comments = config('DEFAULT_COMMENT');
        dump(count($comments));
        $num = mt_rand(0, count($comments) - 1);
        dump($num);
        die;
        $com = $comments[$num];

    }

    public function agentTestCount()
    {
        $userId = 607;
        $userInfo = User::get($userId);
        if ($userInfo->pid != 0) {
            $agentInfo = User::get($userInfo->pid);
            $agentInfo->count++;
            $agentInfo->save();
        }

    }

    public function subCommission()
    {
        $user = new User();
        $this->Rebate = model('UserRebate');
        $userId = 205;
        $field = 'id,pid,username';
        $list = $user->where('pid', $userId)->field($field)->withCount(['order' => function ($query) {
            $query->where('pay_status', '20');
        }])->select();
        dump($list->toArray());
        $count = 0;
        foreach ($list as $item) {
            if ($item['order_count'] > 0) {
                $count = $count + 1;
            }
        }
        dump($count);
        die;
    }

    /*
     * 查看物流
     * @param  $order_id 订单ID
     * */
    public function lookLogistics()
    {
        $this->order_goods = new Litestoreordergoods();
        $orderId = $this->request->param('order_id');
        $id = $this->request->param('id');

        !$orderId && $this->error('order_id不能为空');

        $orderInfo = Litestoreorder::get($orderId);

        !$orderInfo && $this->error('订单信息不存在');
//        ($orderInfo->order_status != 30 || $orderInfo->freight_status != 20) && $this->error('订单状态有误');

        if ($orderInfo->type != 0) {
            !$id && $this->error('id不能为空');
            $writeOffInfo = Litestoreordership::get($id);
            !$writeOffInfo && $this->error('id有误');
            $expressNo = $writeOffInfo->express_no;
            $company = $writeOffInfo->express_company;
        } else {
            $expressNo = $orderInfo->express_no;
            $company = $orderInfo->express_company;
        }
        $code = \app\common\model\Kdniao::getByCompany($company);

        //获取收货地址手机号后四位
        $orderAddress = \app\common\model\Litestoreorderaddress::getByOrderId($orderId);
        $phone = substr($orderAddress->phone, -4);
        //获取详情图片
        $order_good = $this->order_goods->find_data(['order_id' => $orderId], 'images');
        $img = $order_good['images'] ? config('item_url') . $order_good['images'] : '';

        //查看物流
        $express_model = controller('Express');
        $express_model->getOrderTracesByJson($code->code, $expressNo, $company, $img, $phone);
    }

    public function getwuliu()
    {
        //查看物流
        $express_model = controller('Express');
        $res = $express_model->getOrderTracesByJson('YD', '4304458634094', '韵达速递', '', '');
        dump($res);
        die;
    }

    public function setProductionOrder()
    {
        $params = $this->request->request();
        !$params['status'] && $this->error('status不能为空');
        !$params['is_status'] && $this->error('is_status不能为空'); //新增
        $params['totalprice'] = $this->request->request('totalprice', '0', 'trim');
        $params['totalprice'] <= 0 && $this->error('totalprice参数错误');
        $params['uid'] = 1565;

        $totalprice = $total_num = 0;
        $order_no = order_sn($params['type']);
        $order_id = $this->order->add_data(['order_no' => $order_no]);

        switch ($params['status']) {
            case 1: //购物车下单支付
                !$params['shoping_cart_ids'] && $this->error('shoping_cart_ids不能为空');

                $shoping_cart_cout = $this->shoping_cart->getShopingCartNum(['id' => ['IN', $params['shoping_cart_ids']], 'uid' => $params['uid']]);
                $shoping_cart_cout == 0 && $this->error('shoping_cart_ids参数有误');

                $field = 'goods_id,goods_spec_id,goods_name,image images,num total_num,key_name,activity_id,type activity_type';
                $list = $this->shoping_cart->select_data(['id' => ['IN', $params['shoping_cart_ids']], 'uid' => $params['uid']],
                    $field);

                //判断库存是否充足 获取订单详情数据
                foreach ($list as $k => $v) {
                    //获取单价
                    $where = [];
                    $where['goods_id'] = $v['goods_id'];
                    $goods_info = $this->item->find_data($where, 'deduct_stock_type ,spec_type,content,image');

                    $where['goods_spec_id'] = $v['goods_spec_id'];
                    $goods_spec = $this->item_spec->find_data($where, 'stock_num,vip_price,goods_price,spec_sku_id,goods_no,line_price,goods_weight');

                    if ($goods_spec['stock_num'] < $v['total_num'])
                        $this->error('商品库存不足');

                    //获取订单商品数据
                    $goods_price = $this->auth->vip_type != 0 && $params['type'] == 1 ? $goods_spec['vip_price'] : $goods_spec['goods_price'];
                    $list[$k]['goods_price'] = $goods_price;
                    $goods_spec['goods_price'] = $goods_price;
//                    $list[$k]['goods_price'] = $goods_spec['goods_price'];
                    $list[$k]['deduct_stock_type'] = $goods_info['deduct_stock_type'];
                    $list[$k]['spec_type'] = $goods_info['spec_type'];
                    $list[$k]['content'] = $goods_info['content'];
                    $list[$k]['total_price'] = $v['total_num'] * $list[$k]['goods_price'];
                    $list[$k]['order_id'] = $order_id;
                    $list[$k]['user_id'] = $params['uid'];
                    $add_order_goods[] = array_merge($list[$k]->getData(), $goods_spec->getData());
                    $total_num += $v['total_num'];
                    $totalprice += $goods_price * $v['total_num'];
//                    dump($add_order_goods);die;
                }

                break;
            case 2: //直接支付
                !$params['goods_id'] && $this->error('goods_id不能为空');
                !$params['goods_spec_id'] && $this->error('goods_spec_id不能为空');
                !$params['num'] && $this->error('num不能为空');

                $where['goods_id'] = $params['goods_id'];
                $goods_info = $this->item->find_data($where, 'deduct_stock_type ,spec_type,content,goods_id,goods_name,vip_level');

                $where['goods_spec_id'] = $params['goods_spec_id'];
                $goods_spec = $this->item_spec->find_data($where, 'stock_num,goods_price,spec_sku_id,goods_no,goods_spec_id,line_price,goods_weight,key_name,spec_image,vip_price');
                if ($goods_spec['stock_num'] < $params['num'] && $params['type'] != 6)
                    $this->error('商品库存不足');

                //获取订单商品数据
                $goods_info['total_num'] = $params['num'];

                switch ($params['type']) {
                    case 5: //拼团(单独购买)
                        $goods_spec['total_price'] = $params['num'] * $goods_spec['line_price'];
                        $goods_spec['goods_price'] = $goods_spec['line_price'];
                        break;
                    case 6: //套餐下单
                        $goods_spec['total_price'] = $params['num'] * $goods_spec['goods_price'];
                        break;
                    case 2://限时抢购商品
                        $goods_spec['total_price'] = $params['num'] * $goods_spec['marketing_price'];
                        $goods_spec['goods_price'] = $goods_spec['marketing_price'];
                        break;
                    default: //普通商品
                        if ($this->auth->vip_type != 0 && $params['type'] == 1) {
                            $goods_spec['total_price'] = $params['num'] * $goods_spec['vip_price'];
                            $goods_spec['goods_price'] = $goods_spec['vip_price'];
                        } else {
                            $goods_spec['total_price'] = $params['num'] * $goods_spec['goods_price'];
                        }
                        break;
                }
                $goods_spec['order_id'] = $order_id;
                $goods_spec['user_id'] = $params['uid'];
                $goods_spec['activity_id'] = $params['activity_id'];
                $goods_spec['activity_type'] = $params['type'];
                $goods_spec['images'] = $goods_spec['spec_image'];
                $add_order_goods[] = array_merge($goods_info->getData(), $goods_spec->getData());
                $total_num = $params['num'];

                $totalprice = $goods_spec['total_price'];
                break;
        }
        $pay_price = $totalprice;

        if ($params['is_status'] == 1) {
            !$params['address_id'] && $this->error('address_id不能为空');
            //添加收货地址
            $address_info = model('Litestoreaddress')->getOneDate(['address_id' => $params['address_id']],
                'name,phone,province_id,city_id,region_id,detail,site');

            if (!$address_info)
                $this->error('address_id错误');

            $address_info['user_id'] = $params['uid'];
            $address_info['address_id'] = $params['address_id'];
            unset($address_info['id']);
            $address_info['order_id'] = $order_id;
            $address_info = $address_info->getData();
            $address_add = model('Litestoreorderaddress')->add_data($address_info);
        } else {
            !$params['apply_id'] && $this->error('apply_id不能为空');//新增时间2.13

            $address_info = model('UserAgentApply')->find_data(['id' => $params['apply_id'], 'store_status' => 1], 'address,store_name,mobile,site');
            !$address_info && $this->error('代理商地址不存在');
            $address_add_info = [
                'user_id' => $params['uid'],
                'order_id' => $order_id,
                'name' => $address_info['store_name'],
                'phone' => $address_info['mobile'],
                'detail' => $address_info['address'],
                'site' => $address_info['site'],
                'createtime' => time(),
                'address_id' => $params['apply_id'],
            ];
            $address_add = model('Litestoreorderaddress')->add_data($address_add_info);
        }

        //开始事务 生成订单
        //判断优惠券
        $this->item->startTrans();
        if ($params['coupon_id'] > 0 && $params['type'] == 1) {
            $coupon_where = [
                'litestorecoupondata.id' => $params['coupon_id'],
                'litestorecoupondata.user_id' => $params['uid'],
                'litestorecoupondata.is_used' => 0,
                'litestorecoupondata.use_start_time' => ['ELT', time()],
                'litestorecoupondata.use_end_time' => ['EGT', time()]
            ];

            $coupon_info = model('common/Litestorecoupondata')->where($coupon_where)->field('id')->with('coupon')->find();

            $coupon_info->use_time = time();
            $coupon_info->is_used = 1;
            $coupon_info->allowField(true)->save();


            if ($coupon_info)
                $pay_price = $pay_price - $coupon_info->coupon->deduct;
        }

        //运费
        $pay_price = $pay_price + $params['freight'];

        /*if ($pay_price * 100 > $params['totalprice'] * 100)
            $this->error('订单金额有误');*/

        //生成订单
        $order_array = [
            'total_price' => $pay_price,
            'pay_price' => $pay_price,
            'freight_price' => $params['freight'],//邮费2/20新增
            'express_price' => $params['freight'],
            'user_id' => $params['uid'],
            'coupon_id' => $coupon_info ? $coupon_info->id : 0,
            'total_num' => $total_num,
            'order_type' => $params['type'] == 4 ? 20 : 10,
            'remark' => $params['remark'],
            'coupon_price' => $coupon_info ? $coupon_info->coupon->deduct : 0,
            'activity_id' => $params['activity_id'] ? $params['activity_id'] : 0,
            'activity_type' => $params['type'] ? $params['type'] : 1,
            'createtime' => time(),
            'is_status' => $params['is_status'], //新增时间2.13
            'consignee' => empty($params['consignee']) ? '' : $params['consignee'],//新增时间2.13
            'reserved_telephone' => $params['reserved_telephone'],//新增时间2.13
            'apply_id' => $params['apply_id'],//新增时间2.13
            'nickname' => $this->auth->nickname,//新增时间3.18
            'mobile' => $this->auth->mobile,//新增时间3.18
            'type' => $params['status'] == 2 ? $goods_info['vip_level'] : 0 //vip套餐等级 0 普通商品 1普通VIp 2尊享VIP
        ];
//        dump($order_array);die;
        $add_order = $this->order->update_data(['id' => $order_id], $order_array);
        //添加订单明细
        $add_order_goods = $this->order_goods->add_data($add_order_goods);

        //删除购物车
        $del_shoping_cart_ids = $params['status'] == 2 ? 1 : $this->shoping_cart->delete_data(['id' => ['IN', $params['shoping_cart_ids']], 'uid' => $params['uid']]);

        //团购数据添加
        if ($params['type'] == 4 && $params['activity_id']) {

            $model = new Marketing();
            $model->addJoinGroupbuy($params['uid'], $params['goods_id'], $params['activity_id'], $order_id, $params['group_id']);
        }
//            dump($add_order_goods);dump($add_order);dump($del_shoping_cart_ids);dump($address_add);die;
        if ($add_order_goods && $add_order && $del_shoping_cart_ids && $address_add) {
            dump($this->auth->nickname);
            die;
            $this->item->commit();
            $this->success('提交成功', ['order_no' => $order_no, 'totalprice' => $order_array['pay_price']]);
        } else {
            $this->item->rollback();
            $this->error('操作失败');
        }
    }


}