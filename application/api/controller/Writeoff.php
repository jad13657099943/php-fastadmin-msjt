<?php

namespace app\api\controller;

use app\common\controller\Api;
use app\common\model\Litestoreorder;
use app\common\model\Litestoreorderwriteoff;
use app\common\model\UserAgentApply;
use fast\Date;
use fast\Random;

/**
 * 核销接口
 * Class Writeoff
 * @package app\api\controller
 */
class Writeoff extends Api
{
    protected $noNeedRight = ['*'];
    protected $noNeedLogin = ['autoWriteoff'];

    /** @var Litestoreorderwriteoff */
    private $writeOff = null;

    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->writeOff = model('common/Litestoreorderwriteoff');
    }


    public function up()
    {
        $where = [
            'type' => 1,
            'current_frequency' => 1,
        ];
        $list = model('common/Litestoreorder')->where($where)->select();
        foreach ($list as $item) {
            $item->ship_time += Date::MONTH;
            $item->order_status == 20 && $item->order_status = 30;
            $item->save();
        }
    }

    /**
     * 获取待核销订单
     * @param int type 1 待核销 2已核销
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function getWaitList()
    {
        $type = $this->request->param('type');
        !$type && $this->error('type不能为空');
        $id = model('Useragentapply')->where(['uid' => $this->auth->id])->order('create_time desc')->value('id');
        $order = model('common/Litestoreorder');
        $field = 'id,order_no,type,(total_frequency-current_frequency) as frequency,total_num,total_price,consignee,reserved_telephone';
        $where = ['apply_id' => $id, 'order_status' => $type == 1 ? 30 : 50, 'is_status' => 2];
        $list = $order->where($where)->field($field)
            ->with(['goods' => function ($query) {
                $query->field('order_id,spec_sku_id,goods_name,images,goods_price,total_num')
                    ->with(['spec' => function ($query) {
                        $query->withField('spec_sku_id,key_name');
                    }]);
            }])->select();
        foreach ($list as $k => $item) {
            foreach ($item->goods as $i => $value) {
                $list[$k]['goods'][$i]['images'] = $value->images ? config('item_url') . $value->images : '';
            }
        }
        $this->success('success', ['list' => $list]);
    }


    /**
     * 获取核销二维码
     * @param order_id 订单id
     * @throws \think\exception\DbException
     */
    public function getQRCode()
    {
        //订单信息
        $orderId = $this->request->request('order_id');

        !$orderId && $this->error('order_id不能为空');
        $info = Litestoreorder::get($orderId);
        !$info && $this->error('未找到订单信息');
        $info->order_status == 50 && $this->error('订单已经完成');

        //为套餐订单时
        if ($info->type != 0) {
            if ($info->ship_time > 0 && time() < $info->ship_time) {
                $this->error('核销时间未到!', ['next_time' => $info->ship_time]);
            }
        }

        $isSelf = 0;
        if ($this->auth->distributor != 0 && $info->apply_id) {
            $agent = UserAgentApply::get($info->apply_id);
            $agent->uid == $this->auth->id && $isSelf = 1;

        }
        if (!empty($info->qrcode)){
            $qrcode=$info->qrcode;
        }else{
            $qrcode = mt_rand(1111,9999);
            $info->save(['qrcode'  => $qrcode,],['id' => $orderId]);
        }
        $result = [
//            'qrcode' => config('url_domain_root') . self::createQRCode($info),
            'qrcode'=>$qrcode,
            'info' => $info,
            'is_self' => $isSelf,
        ];
        $this->success('生成成功', $result);
    }

    /**
     * 解析二维码数据
     */
    public function parseQrCodeData()
    {
        $data = $this->request->request('data');
        !$data && $this->error('数据有误');
        //解析二维码里的数据
        parse_str($data, $param);
        //获取二维码有效时间
        $failTime = config('site.writeoff_fail_time');
        //验证二维码有效期
        if ($failTime != 0 && (!isset($param['timestamp']) || (time() - $param['timestamp']) > $failTime)) {
            $this->error('二维码已失效');
        }
        $field = 'id,order_no,total_price,pay_price,consignee,reserved_telephone';
        $info = model('common/Litestoreorder')->find_data(['id' => $param['orderId']], $field);
        $field = 'order_id,spec_sku_id,goods_name,images,goods_price,total_num';
        $goodsList = model('Litestoreordergoods')->field($field)->where(['order_id' => $param['orderId'], 'is_refund' => 0])
            ->with(['spec' => function ($query) {
                $query->field('spec_sku_id,key_name');
            }])->select();

        foreach ($goodsList as $k => $goods) {
            $goodsList[$k]['images'] = $goods['images'] ? config('item_url') . $goods['images'] : '';
        }
        $info['goodsList'] = $goodsList;
        $this->success('获取成功', $info);
    }

    /**
     * 确认核销
     * @param order_id 订单id
     * @param remark 核销备注
     * @throws \think\Exception
     * @throws \think\exception\DbException
     * @throws \think\exception\PDOException
     */
    public function confirmWriteoff()
    {
        //验证操作者权限
        $this->auth->distributor == 0 && $this->error('你没有权限执行此操作');
        $orderId = $this->request->request('order_id');
        $remark = $this->request->request('remark');

        !$orderId && $this->error('order_id不能为空');

        $orderInfo = Litestoreorder::get($orderId);
        //验证订单状态
        $orderInfo->order_status == 50 && $this->error('此订单已核销');
        //验证代理商取货点
        $agent = UserAgentApply::get($orderInfo->apply_id);
        $agent->uid != $this->auth->id && $this->error('该订单不属于你的核销范围');

        $this->writeOff->startTrans();
        if ($orderInfo->type == 0) {
            Pay::commission($orderInfo);
            $orderInfo->order_status = 50;
        } else {
            if ($orderInfo->ship_time > 0 && time() < $orderInfo->ship_time) {
                $this->error('核销时间未到!', ['next_time' => $orderInfo->ship_time]);
            }

            ++$orderInfo->current_frequency;
            if ($orderInfo->total_frequency == $orderInfo->current_frequency) {
                $orderInfo->order_status = 50;
                $orderInfo->ship_time = 0;
            } elseif ($orderInfo->total_frequency < $orderInfo->current_frequency) {
                $this->error('核销次数已用完!');
            } else {
                $orderInfo->ship_time += $orderInfo->time_interval * Date::DAY;
            }
            self::commission($this->auth->getUser());
        }

        //核销记录
        $data = [
            'order_id' => $orderId,
            'uid' => $this->auth->id,
            'remark' => $remark,
            'nickname' => $this->auth->nickname,
            'express_no' => order_sn(9),
        ];

        //修改订单状态
        $orderInfo->save();
        //添加核销记录
        if ($this->writeOff->add($data)) {
            $this->writeOff->commit();
            $this->success('核销成功');
        }
        $this->writeOff->rollback();
        $this->error('核销失败');
    }


    /**
     * 套餐订单自动核销
     */
    public function autoWriteoff()
    {
        $time = strtotime('-5 day');
        $where = [
            'type' => ['neq', 0],
            'is_status' => 2,
            'ship_time' => ['ELT', $time],
            'order_status' => 20,
        ];
        $list = model('common/Litestoreorder')->where($where)->select();
        foreach ($list as $item) {
            ++$item->current_frequency;
            if ($item->total_frequency == $item->current_frequency) {
                $item->order_status = 50;
                $item->ship_time = 0;
            } elseif ($item->total_frequency < $item->current_frequency) {
                $this->error('核销次数已用完!');
            } else {
                list(, $interval) = $this->getLevel($item->type);
                $item->ship_time += $interval * Date::DAY;
            }
            $user = \app\common\model\User::get($item->user_id);
            self::commission(\app\common\model\User::get($user->pid));
            //核销记录
            $data = [
                'order_id' => $item->id,
                'uid' => 0,
                'remark' => '超时系统自动核销',
                'nickname' => 'admin',
                'express_no' => order_sn(9),
            ];

            //修改订单状态
            $item->save();
            $this->writeOff->add($data);
        }
    }


    public static function commission(\app\common\model\User $user)
    {
        if ($user) {
            $user->total_balance += config('site.ordinary_commission');
            \app\common\model\User::balance(config('site.ordinary_commission'), $user->id, 1);
            $user->save();
        }
    }

    /**
     * 生成核销二维码
     * @param $order
     * @return string
     */
    public static function createQRCode($order)
    {
        //存储位置
        $url = "/qrcode/" . date('Y-m-d') . "/";
        $path = ".$url";
        //判断目录是否存在
        if (!is_dir($path)) {
            mkdir($path);
        }
        //文件名称
        $file = time() . $order->order_no . Random::alpha(4) . '.png';

        //二维码数据
        $data = "orderId=$order->id&timestamp=" . time();

        vendor('phpqrcode.phpqrcode');
        //生成二维码
        \QRcode::png($data, $path . $file);
        return "/$url$file";
    }

    /**
     * 通过订单号获取购买套餐和响应配置
     * @param $level
     * @return array
     * @throws \think\exception\DbException
     */
    private function getLevel($level)
    {
        $frequency = config('site.vip' . $level . '_frequency');
        $interval = config('site.vip' . $level . '_interval');
        return [$frequency, $interval];
    }
}